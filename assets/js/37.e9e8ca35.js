(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{550:function(t,v,_){t.exports=_.p+"assets/img/B站业务架构图.5fefe4ff.jpg"},551:function(t,v,_){t.exports=_.p+"assets/img/监控体系.b7f65660.jpg"},552:function(t,v,_){t.exports=_.p+"assets/img/运维实时大盘.25f921de.jpg"},925:function(t,v,_){"use strict";_.r(v);var a=_(12),r=Object(a.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"title"}),a("p",[t._v("视频名称：哔哩哔哩-哔哩哔哩的Go微服务实战"),a("br"),t._v("\n视频地址：https://www.bilibili.com/video/av29079011"),a("br"),t._v("\n演讲者：毛剑，哔哩哔哩技术总监"),a("br"),t._v("\n演讲时间：Gopher China 2017")])]),t._v(" "),a("p",[t._v("[TOC]")]),t._v(" "),a("h2",{attrs:{id:"开门见山"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开门见山"}},[t._v("#")]),t._v(" 开门见山")]),t._v(" "),a("ul",[a("li",[t._v("加入bilibili两年了(这么算的话是15年加入)，经历了完整的巨石架构到微服务拆分。")]),t._v(" "),a("li",[t._v("刚来的一段时间，周一到周五选一天炸，周六周日必炸")])]),t._v(" "),a("h2",{attrs:{id:"微服务的演进"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务的演进"}},[t._v("#")]),t._v(" 微服务的演进")]),t._v(" "),a("h3",{attrs:{id:"b站早期代码问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b站早期代码问题"}},[t._v("#")]),t._v(" B站早期代码问题")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("进B站之前没见过巨石架构，进了B站才见识到，给B站早起的代码起了个外号叫KFC全家桶，因为什么东西都在里面，原本是基于dedecms做的。")]),t._v(" "),a("ul",[a("li",[t._v("部署非常不方便，主站代码只有一个仓库，部署时全部打包无脑往上扔，经常起不来")]),t._v(" "),a("li",[t._v("Nginx的location配置就有上千条")]),t._v(" "),a("li",[t._v("测试成本非常高，发空间的代码账号会炸，发账号的代码全炸")]),t._v(" "),a("li",[t._v("开发效率低，代码负责不清晰")])])]),t._v(" "),a("li",[a("p",[t._v("怎么解决？")]),t._v(" "),a("ul",[a("li",[t._v("梳理业务边界")]),t._v(" "),a("li",[t._v("资源隔离部署")]),t._v(" "),a("li",[t._v("内外网服务隔离")]),t._v(" "),a("li",[t._v("RPC框架")]),t._v(" "),a("li",[t._v("API Gateway")])])])]),t._v(" "),a("h3",{attrs:{id:"梳理业务边界"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#梳理业务边界"}},[t._v("#")]),t._v(" 梳理业务边界")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{width:"400",src:_(550)}})]),t._v(" "),a("p",[t._v("顶层：稿件、账号\n中间：会员、投稿、动态、财产、关系链\n底层辅助：验证码、ip查找、敏感词过滤、配置中间、推送、PB")]),t._v(" "),a("ul",[a("li",[t._v("开始做微服务时一定要搞清楚业务边界，一开始的做法是农村包围城市，先把周边的、非核心业务拆分，比如用户的播放历史、收藏夹、评论")]),t._v(" "),a("li",[t._v("要考虑兼容性")])]),t._v(" "),a("h3",{attrs:{id:"资源隔离部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资源隔离部署"}},[t._v("#")]),t._v(" 资源隔离部署")]),t._v(" "),a("ul",[a("li",[t._v("原来所有东西都打包扔到服务器上，一个挂了可能导致全挂，所以第一件事就是买服务器，尽量不要和不可靠的程序员写的代码放一块（23333）")])]),t._v(" "),a("h3",{attrs:{id:"内外网服务隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内外网服务隔离"}},[t._v("#")]),t._v(" 内外网服务隔离")]),t._v(" "),a("ul",[a("li",[t._v("B站2015年遇到一些安全事件，比如AppKey泄漏（从客户端被逆向），有人就用这个AppKey请求内网接口。这时B站的内网接口其实也暴露在公网，只要有高权限的AppKey，也能请求成功。")]),t._v(" "),a("li",[t._v("角色定义：SLB——>Gateway、Platform——>Service——>Admin")])]),t._v(" "),a("h3",{attrs:{id:"rpc框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rpc框架"}},[t._v("#")]),t._v(" RPC框架")]),t._v(" "),a("ul",[a("li",[t._v("需要的特性：\n"),a("ul",[a("li",[t._v("序列化（GOB）")]),t._v(" "),a("li",[t._v("上下文管理（超时控制）")]),t._v(" "),a("li",[t._v("拦截器（鉴权、统计、限流）")]),t._v(" "),a("li",[t._v("服务注册（Zookeeper）")]),t._v(" "),a("li",[t._v("负载均衡（客户端）：起初考虑过LVS、DNS等方案，但是当时人手少，直连性能还是最好的，不需要经过多层转发，所以选择了客户端负载")])])])]),t._v(" "),a("p",[t._v("这里开始展示了一下代码")]),t._v(" "),a("ul",[a("li",[t._v("在rpc框架中加入上下文context作为函数的第一个参数")]),t._v(" "),a("li",[t._v("拦截器")]),t._v(" "),a("li",[t._v("客户端负载均衡")])]),t._v(" "),a("h3",{attrs:{id:"api-gateway"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-gateway"}},[t._v("#")]),t._v(" API Gateway")]),t._v(" "),a("ul",[a("li",[t._v("统一&聚合协议")]),t._v(" "),a("li",[t._v("errgroup并行调用")]),t._v(" "),a("li",[t._v("业务隔离：有些公司对外就一个api，所有业务都走一个接口，这样有点危险")]),t._v(" "),a("li",[t._v("熔断、降级、限流等高可用")])]),t._v(" "),a("h2",{attrs:{id:"高可用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高可用"}},[t._v("#")]),t._v(" 高可用")]),t._v(" "),a("h3",{attrs:{id:"隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隔离"}},[t._v("#")]),t._v(" 隔离")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("-")]),t._v(" "),a("th",[t._v("-")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("服务隔离")]),t._v(" "),a("td",[t._v("压力分流、稳定性高、物理隔离")])]),t._v(" "),a("tr",[a("td",[t._v("轻重隔离")]),t._v(" "),a("td",[t._v("核心稳定、快慢分离、流量迁移")])]),t._v(" "),a("tr",[a("td",[t._v("物理隔离")]),t._v(" "),a("td",[t._v("进程隔离、集群隔离、机房隔离")])])])]),t._v(" "),a("h3",{attrs:{id:"超时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#超时"}},[t._v("#")]),t._v(" 超时")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("-")]),t._v(" "),a("th",[t._v("-")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("设置超时")]),t._v(" "),a("td",[t._v("连接超时、读取超时、写入超时")])]),t._v(" "),a("tr",[a("td",[t._v("合理超时")]),t._v(" "),a("td",[t._v("避免过短、避免过长、动态设置")])])])]),t._v(" "),a("ul",[a("li",[t._v("故障实例："),a("code",[t._v("database/sql")]),t._v("库没有超时，导致一次跨机房业务故障，主要是连接到一个数据库，当时机房专线断了，导致进程全部堵住。当时只发现CPU有点高，最后用gdb去调，看看goroutine卡在哪个堆栈找到的。其实用go tool pprof也能定位错误。")])]),t._v(" "),a("h3",{attrs:{id:"限流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#限流"}},[t._v("#")]),t._v(" 限流")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("-")]),t._v(" "),a("th",[t._v("-")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("流量限流")]),t._v(" "),a("td",[t._v("accept、connection、thread")])]),t._v(" "),a("tr",[a("td",[t._v("资源限流")]),t._v(" "),a("td",[t._v("连接池、线程池")])]),t._v(" "),a("tr",[a("td",[t._v("请求限流")]),t._v(" "),a("td",[t._v("总数、时间窗口、平滑限流")])]),t._v(" "),a("tr",[a("td",[t._v("分布式限流")]),t._v(" "),a("td",[t._v("redis+lua、nginx+lua")])]),t._v(" "),a("tr",[a("td",[t._v("接入层限流")]),t._v(" "),a("td",[t._v("nginx limit_req、nginx limit_conn")])])])]),t._v(" "),a("h3",{attrs:{id:"降级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#降级"}},[t._v("#")]),t._v(" 降级")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("-")]),t._v(" "),a("th",[t._v("-")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("调用链路")]),t._v(" "),a("td",[t._v("U1降级、U1片段降级、U1异步请求降级、功能降级、读/写降级、接入层降级、应用层降级")])]),t._v(" "),a("tr",[a("td",[t._v("自动降级")]),t._v(" "),a("td",[t._v("超时降级、统计失败降级、服务故障降级、限流降级")])]),t._v(" "),a("tr",[a("td",[t._v("手动降级")]),t._v(" "),a("td",[t._v("功能开关、只读缓存、只读静态化、写异步化降级")])])])]),t._v(" "),a("ul",[a("li",[t._v("ttl客户端降级：有些用户在某个页面打不开时喜欢重复刷新，服务器此时可以返回一个ttl字段告诉客户端这段时间内不要再发网络请求了。")]),t._v(" "),a("li",[t._v("返回静态/固定数据：比如推荐系统挂了，接口可以返回一些固定数据。")]),t._v(" "),a("li",[t._v("必要的服务开关")])]),t._v(" "),a("h3",{attrs:{id:"容错"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容错"}},[t._v("#")]),t._v(" 容错")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("-")]),t._v(" "),a("th",[t._v("-")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("重试容错")]),t._v(" "),a("td",[t._v("简单重试、准备重试、成功率重试、快速失败")])]),t._v(" "),a("tr",[a("td",[t._v("熔断容错")]),t._v(" "),a("td",[t._v("动态剔除、异常恢复")])])])]),t._v(" "),a("h2",{attrs:{id:"中间件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中间件"}},[t._v("#")]),t._v(" 中间件")]),t._v(" "),a("p",[t._v("此时需要造一些轮子")]),t._v(" "),a("ul",[a("li",[t._v("databus：基于Kafka\n"),a("ul",[a("li",[t._v("kafka各个语言的sdk有bug，版本也有问题，因此基于redis协议封装了databus，底层还是kafka")]),t._v(" "),a("li",[t._v("kafka缺少鉴权")])])]),t._v(" "),a("li",[t._v("canal：MySQL Replication")]),t._v(" "),a("li",[t._v("bilitw：基于Twemproxy")]),t._v(" "),a("li",[t._v("bfs：facebook haystack，opencv")]),t._v(" "),a("li",[t._v("config-service：\n"),a("ul",[a("li",[t._v("一开始就是配置文件，通过ansible发布，太痛苦")]),t._v(" "),a("li",[t._v("参考了很多配置中心方法，最后还是直接把配置存到MySQL，配置中心直接取，应用通过http的方式获取自己的配置")])])]),t._v(" "),a("li",[t._v("dapper：google dapper\n"),a("ul",[a("li",[t._v("出问题排错、甩锅，实际上就是要需要日志系统：databus生成traceId(一个请求一个)，kafka排队收集到ES、HBase，最后写一个api+前端界面")]),t._v(" "),a("li",[t._v("注入traceId的方式：就是加在http请求头里，把traceID逐级传递，同时记一下父服务id、当前服务id")])])])]),t._v(" "),a("h2",{attrs:{id:"持续集成和交付"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持续集成和交付"}},[t._v("#")]),t._v(" 持续集成和交付")]),t._v(" "),a("h3",{attrs:{id:"版本管理-语义化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本管理-语义化"}},[t._v("#")]),t._v(" 版本管理（语义化）")]),t._v(" "),a("p",[t._v("使用语义化的版本管理：MAJOR.MINOR.PATCH")]),t._v(" "),a("ul",[a("li",[t._v("MAJOR：改变意味着其中包含不向后兼容的修改")]),t._v(" "),a("li",[t._v("MINOR：改变意味着有新功能的增加，但应该是向后兼容的")]),t._v(" "),a("li",[t._v("PATCH：改变代表对已有功能的bug修复")])]),t._v(" "),a("p",[t._v("因此使用对方服务的时候，需要明确有微服务或者是API的版本管理，基于此我们知道是否是兼容的。")]),t._v(" "),a("p",[t._v("多版本共存，比如v1和v2同时存在，等到v1完全没有流量时再下掉，大家都用v2。")]),t._v(" "),a("h3",{attrs:{id:"分支管理-gitlab-mr-review"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支管理-gitlab-mr-review"}},[t._v("#")]),t._v(" 分支管理（gitlab+mr review）")]),t._v(" "),a("ul",[a("li",[t._v("就是gitlab flow，master和develop做了保护分支")]),t._v(" "),a("li",[t._v("功能分支合并代码需要提起merge request，需要同时review")])]),t._v(" "),a("h3",{attrs:{id:"环境管理-集成环境-、测试-单元测试、服务测试-、发布-冒烟、灰度、蓝绿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境管理-集成环境-、测试-单元测试、服务测试-、发布-冒烟、灰度、蓝绿"}},[t._v("#")]),t._v(" 环境管理（集成环境）、测试（单元测试、服务测试）、发布（冒烟、灰度、蓝绿）")]),t._v(" "),a("ul",[a("li",[t._v("gitlab webhook到jenkins，一旦有merge事件发生，就会触发jenkins构建一个docker镜像，扔到单独的测试环境。")]),t._v(" "),a("li",[t._v("自建了一个发布平台：工单、测试、发布")])]),t._v(" "),a("h2",{attrs:{id:"运维体系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运维体系"}},[t._v("#")]),t._v(" 运维体系")]),t._v(" "),a("h3",{attrs:{id:"扩容、发版平台"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩容、发版平台"}},[t._v("#")]),t._v(" 扩容、发版平台")]),t._v(" "),a("p",[t._v("运维同学用mesos+docker做的，提供webterminal")]),t._v(" "),a("h3",{attrs:{id:"日志收集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日志收集"}},[t._v("#")]),t._v(" 日志收集")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("业务服务")]),t._v(" "),a("th",[t._v("收集")]),t._v(" "),a("th",[t._v("分发")]),t._v(" "),a("th",[t._v("存储")]),t._v(" "),a("th",[t._v("UI")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Service")]),t._v(" "),a("td",[t._v("Agent")]),t._v(" "),a("td",[t._v("Lancer")]),t._v(" "),a("td",[t._v("NAS、ES")]),t._v(" "),a("td",[t._v("Kibana")])])])]),t._v(" "),a("ul",[a("li",[t._v("Log Agent放到统一的物理机docker里，通过unix socket暴露一个端口出来，业务代码就把日志打给这里。")])]),t._v(" "),a("h3",{attrs:{id:"监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#监控"}},[t._v("#")]),t._v(" 监控")]),t._v(" "),a("ul",[a("li",[t._v("监控底层目前最佳选择就是Zabbix")])]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{width:"340",src:_(551)}})]),t._v(" "),a("ul",[a("li",[t._v("客户端可以上报服务器异常")]),t._v(" "),a("li",[t._v("运维同学的事实大盘（标题开头是御坂网络，笑死我了）\n"),a("div",{attrs:{align:"center"}},[a("img",{attrs:{width:"340",src:_(552)}})])])]),t._v(" "),a("h2",{attrs:{id:"提问环节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提问环节"}},[t._v("#")]),t._v(" 提问环节")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("databus重复消费问题\n答：要求业务方尽可能幂等")])]),t._v(" "),a("li",[a("p",[t._v("gateway是否实现了服务编排\n答：目前还是人工代码去做的，调研过graphql动态查询执行")])]),t._v(" "),a("li",[a("p",[t._v("版本号调用\n答：请求体或者url里带上版本号")])]),t._v(" "),a("li",[a("p",[t._v("版本管理中，十天半个月跑一次的job对应版本被下掉了咋办\n答：认栽（233")])]),t._v(" "),a("li",[a("p",[t._v("唯一traceId链路追踪，是通过时序控制还是其它的方式描绘调用图\n答：我们有parentId的，可以清楚看到上下游")])])]),t._v(" "),a("ul",[a("li",[t._v("并行调用咋办：看时序")]),t._v(" "),a("li",[t._v("服务器时间不一定是统一的咋办：时间修正，client发出请求的时间一定比下游服务收到的时间要早")])]),t._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[a("p",[t._v("Api Gateway，Nginx+lua，会在这后面做一些鉴权、限流、服务降级吗\n答：我们Nginx+lua只做了简单的分布式限流，Api Gatewat是用go写的，这里实现了鉴权、限流、服务降级等功能，是通过管理界面或者服务治理去触发的。")])]),t._v(" "),a("li",[a("p",[t._v("Api Gateway的功能其实也是能用nginx做的，你们用go做的话有什么比较吗？\n答：我个人是不建议将Nginx这一层做的非常重的，因为不方便切云服务商。")])]),t._v(" "),a("li",[a("p",[t._v("CICD这一块，你们DB有容器化吗？\n答：DB没有容器化。另外，我们服务测试环境和集成测试环境的DB都是同一个，少部分是两个，并且只加字段不删字段。")])])])])}),[],!1,null,null,null);v.default=r.exports}}]);